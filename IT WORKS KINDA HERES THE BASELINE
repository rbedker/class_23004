import random
import character_sheets.py


def import_class(class_list):
    '''imports classes from char_stats.txt'''
    line_list = []
    list_type = ["class_name", "atk",
                 "dfns", "dod", "hp",
                 "intel", "fth", "stgh", "dex"]

    with open("char_stats.txt", 'r') as f:
        for line in f:
            line = line.replace("\n", "")
            line = line.split()
            for item in line:
                if item.isdigit() == True:
                    line[line.index(item)] = int(item)
            line_list.append(line)

    for characters in line_list:
        dict_char = dict(zip(list_type, characters))
        class_list.insert(-1, dict_char)


def exp_gain(exp_amt):
    '''adds exp given an exp amount'''
    lower += exp_amt
    exp_dictionary[upper] = lower
    for exp_dictionary in party:
        if exp_dictionary.get(upper) >= upper:
            while exp_dictionary.get(upper) >= upper:
                level += 1
                lower -= upper
                exp_dictionary['level'] = level
                exp_dictionary.pop(upper)
                upper += round((upper * 0.7))
                exp_dictionary.update({upper:lower})

def import_monsters(monster_list):
    '''imports classes from char_stats.txt'''
    line_list = []

    list_type = ["monster_name", "atk",
                 "dfns", "dod", "hp",
                 "intel", "fth", "stgh", "dex", "diff", "xp"
                ]

    with open("monster_stats.txt", 'r') as f:
        for line in f:
            line = line.replace("\n", "")
            line = line.replace(",", " ")
            line = line.split()
            for item in line:
                if item.isdigit() == True or item.isdecimal() == True:
                    line[line.index(item)] = float(item)
            line_list.append(line)

    for characters in line_list:
        dict_char = dict(zip(list_type, characters))
        monster_list.insert(-1, dict_char)


def return_char(name, char_list):
    '''loops through char list to find appropriate char dict'''
    for x in char_list:
        if x['name'] == name.lower():
            return x
    else:
        raise ValueError('Char doesn\'t exist!')


def pick_characters(classes, party):
    '''picks party at start'''
    while len(classes) > 4:
        classes.remove(random.choice(classes))
    
    while len(party) < 4:
        for dictionary in classes:
            print(f'first class is {dictionary["class_name"]}')
            for char in dictionary["characters"]:
                print_character(char)
                select = input('type character name to add character to party')
                if select.lower() == return_name(char):
                    party.append(char)
                    print(f'{select.title()} has been added to the party!')
    
    print(f'Your party is {party[0]["name"].title()},'
          f'{party[1]["name"].title()}, {party[2]["name"].title()},'
          f'and {party[3]["name"].title()}'
         )


def lose_health(party, character):
    '''decrements hp value for party member'''
    for char in party:
        if char['name'] == character.lower():
            char['character_class']['hp'] -= 2 # dmg would be some small float


def main():
    class_list = []
    monster_list = []
    party = []

    upper = 100
    lower = 0
    
    import_class(class_list)
    import_monsters(monster_list)
    print(monster_list)

    mage_stats = class_list[0]
    cleric_stats = class_list[1]
    monk_stats = class_list[2]
    rogue_stats = class_list[3]
    builder_stats = class_list[4]
    barb_stats = class_list[5]
    cowboy_stats = class_list[6]
    paladin_stats = class_list[7]
   
    char_list = [character_1, character_2, character_3,
                 character_4, character_5, character_6,
                 character_7, character_8
                ]

    
    for x in class_list:
        x.update({'characters': []})
        for y in char_list:
            if return_char_class(y) == x['class_name']:
                x['characters'].append(y)
    

    pick_characters(class_list, party)
    
    for x in party:
        x.update({'level': 1})
        x.update({upper: lower})
        
    print('Welcome, heroes! Prepare to die?')
    
#     while True:
#         spawn_encounter()
        
#         battle()
        
#         enemy_drops()
        
#         handle_party_lvl()


if __name__ == '__main__':
    main()
