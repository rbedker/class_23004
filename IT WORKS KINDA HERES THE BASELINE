import random


def import_class(class_list):
    '''imports classes from char_stats.txt'''
    line_list = []
    list_type = ["class_name", "atk",
                 "dfns", "dod", "hp",
                 "intel", "fth", "stgh", "dex"
                ]

    with open("char_stats.txt", 'r') as f:
        for line in f:
            line = line.replace("\n", "")
            line = line.split()
            for item in line:
                if item.isdigit() == True:
                    line[line.index(item)] = int(item)
            line_list.append(line)

    for characters in line_list:
        dict_char = dict(zip(list_type, characters))
        class_list.insert(-1, dict_char)


def import_chars(char_list, class_list):
    line_list = []
    list_type = ['name', 'desc',
                 'age', 'gender',
                 'start_item', 'ability', 'class'
                ]

    with open('characters.txt', 'r') as f:
        for line in f:
            line = line.strip().split(',')
            line_list.append(line)

    for char in line_list:
        dict_char = dict(zip(list_type, char))
        char_list.insert(-1, dict_char)
        
    for char in char_list:
        for c in class_list:
            if char['class'] == c['class_name']:
                char.update({'character_class': c})
                
    list1 = ["atk","dfns", "dod", "hp",
            "intel", "fth", "stgh", "dex"]
    list3 = []
    
    h = 0

    with open('stat_perc.txt', 'r') as sp:
            for line in sp:
                line = line.split()
                for item in line:
                    if item.isdecimal() != True:
                        line[line.index(item)] = float(item)
                list3.append(line)
                
    for char in list3:
        dict_stat_perc = dict(zip(list1, char))
        class_list[h].update({'stat_perc': dict_stat_perc})
        h += 1
                
    for char in char_list:
        del char['class']

    for x in class_list:
        x.update({'characters': []})
        for y in char_list:
            if y['character_class']['class_name'] == x['class_name']:
                x['characters'].append(y)

def import_monsters(monster_list):
    '''imports classes from char_stats.txt'''
    line_list = []

    list_type = ["monster_name", "atk",
                 "dfns", "dod", "hp",
                 "intel", "fth", "stgh", "dex", "diff", "xp"
                ]

    with open("monster_stats.txt", 'r') as f:
        for line in f:
            line = line.replace("\n", "")
            line = line.replace(",", " ")
            line = line.split()
            for item in line:
                if item.isdigit() == True:
                    line[line.index(item)] = int(item)
                if '.' in item:
                    line[line.index(item)] = float(item)
            line_list.append(line)

    for characters in line_list:
        dict_char = dict(zip(list_type, characters))
        monster_list.insert(-1, dict_char)


def import_items(item_list):
    '''imports items from items.txt'''
    line_list = []
    list_type = ["item_name", "atk",
                 "dfns", "dod", "hp",
                 "intel", "fth", "stgh", "dex"
                ]

    with open("items.txt", 'r') as f:
        for line in f:
            line = line.replace("\n", "")
            line = line.split()
            for item in line:
                if item.isdigit() == True:
                    line[line.index(item)] = int(item)
            line_list.append(line)

    for item in line_list:
        dict_char = dict(zip(list_type, item))
        item_list.insert(-1, dict_char)


def return_char(name, party):
    '''loops through party to find appropriate char dict'''
    for x in party:
        if x['name'] == name.lower():
            return x
    else:
        raise ValueError('Char doesn\'t exist!')


def drop_items(encounter, item_list):
    '''generates item drops from encounters'''
    drops = []
    DROP_RATE = 100
    for monster in encounter:
        prob = range(0, int(monster['diff'] * DROP_RATE))
        if random.randint(0, 500) in prob:
            drops.append(random.choice(item_list))
    
    return drops


def return_char_stats(name, char_list):
    '''loops through char list to find appropriate char dict and find stats of dict'''
    for x in char_list:
        if x['name'] == name.lower():
            return x['class_stats']


def return_char_stat_perc(name, char_list):
    '''loops through char list to find appropriate char dict and find stats perc of dict'''
    for x in char_list:
        if x['name'] == name.lower():
            return x['stat_perc']


def pick_characters(classes, party):
    '''picks party at start'''
    while len(classes) > 4:
        classes.remove(random.choice(classes))

    while len(party) < 4:
        for dictionary in classes:
            print(f'Class is {dictionary["class_name"]}\n')
            for char in dictionary["characters"]:
                while True:
                    print_char(char)
                    select = input('\nType character name to add character to party: ')
                    if select.lower() == char['name']:
                        party.append(char)
                        print(f'\n{select.title()} has been added to the party!\n')
                        break
                    else:
                        print('Not a valid character name!')
                        continue
    upper = 100
    lower = 0
    level = 1
    for x in party:
        x.update({'level': level})
        x.update({upper: lower})
    
    print(f'Your party is {party[0]["name"].title()}, '
          f'{party[1]["name"].title()}, {party[2]["name"].title()}, '
          f'and {party[3]["name"].title()}'
         )

    char_1 = party[0]
    char_2 = party[1]
    char_3 = party[2]
    char_4 = party[3]

    return char_1, char_2, char_3, char_4


def print_char(char):
    print(f"Name: {char['name'].title()}")
    print(f"Class: {char['character_class']['class_name'].title()}")
    print(f"Description: {char['desc'].title()}")
    print(f"Age: {char['age'].title()}")
    print(f"Gender: {char['gender'].title()}")
    print(f"Starter item: {char['start_item'].title()}")
    print(f"Ability: {char['ability'].title()}")


def gen_encounter_list(party, monster_list):
    """ This function generates a list of monsters for the characters to fight """
    poss_encounter = []
    encounter_list = []
    level = 0
    encounter_diff = 0

    for x in range(len(party)):
        lvl = party[x].get('level')
        level += lvl / 4
    
    for monster in range(len(monster_list)):
        monsters = monster_list[monster]
        monster_diff = monster_list[monster].get('diff')
        
        if monster_diff <= level:
            poss_encounter.append(monsters)
    while encounter_diff < level:
        for monsters in poss_encounter:
            random.shuffle(poss_encounter)
            diff = monsters.get('diff')
            if encounter_diff < level and encounter_diff + diff < level * 1.5:
                    encounter_diff += diff
                    encounter_list.append(monsters)
            else:
                continue

    return encounter_list


def main():
    class_list = []
    char_list = []
    monster_list = []
    item_list = []
    party = []

    import_class(class_list)
    import_monsters(monster_list)
    import_chars(char_list, class_list)
    import_items(item_list)
    print(char_list)
    char_1, char_2, char_3, char_4 = pick_characters(class_list, party)

    print('Welcome, heroes! Prepare to die?')
    
    while True:
        print('You press onward, deeper into the dungeon')

        encounter = gen_encounter_list(party, monster_list)

        drop_list = drop_items(encounter, item_list)

        for monster in encounter:
            print(f'You encounter {monster["monster_name"]}\n')
        
        for member in party:
            print(f'Current party member is {member["name"].title()}')

            selection = input('Enter 1 to attack\n'
                              'Enter 2 to defend\n'
                              'Enter 3 to use an item\n'
                              'Enter q to quit the game: '
                             )

            if selection.lower() not in ['1', '2', '3', 'q']:
                print('Enter a valid choice\n')
                continue
            
            if selection == '1':
                for i, monster in enumerate(encounter):
                    print(f'Enter {i + 1} to attack {monster["monster_name"]}\n')
                
                attack_choice = int(input(': ')) - 1

                print(f'{member["name"].title()} attacks {encounter[attack_choice]["monster_name"].title()}\n')
                print(f'{encounter[attack_choice]["monster_name"].title()} loses {member["character_class"]["atk"]} health\n')

                encounter[attack_choice]['hp'] -= member['character_class']['atk']
                
                if encounter[attack_choice]['hp'] <= 0:
                    print(f'{encounter[attack_choice]["monster_name"]} died')
                    encounter.pop(attack_choice)
                else:
                    print(f'{encounter[attack_choice]["monster_name"]}\'s health is now {encounter[attack_choice]["hp"]}\n')

        break
    
if __name__ == '__main__':
    main()
